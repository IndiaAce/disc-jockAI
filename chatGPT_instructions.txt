# disc-jockAI 🎵🤖  
An ML-powered DJ set generator that creates curated music sets based on a given song and set length. Whether you're hosting a party or setting the vibe for a workout, disc-jockAI ensures a seamless musical journey tailored to your preferences.

---

## Features
- **Dynamic Set Generation**: Input a song and desired set length, and generate a playlist that flows smoothly with consistent energy, BPM, and mood.
- **Spotify Integration**: Fetches track data directly from Spotify using its Web API.
- **Feature Engineering**: Utilizes audio features like BPM, energy, and danceability for precise playlist curation.
- **Interactive UI**: (Optional) Use a Streamlit-based interface for an intuitive user experience.

---

## File Structure
```plaintext
dj-set-generator/
├── data/
│   └── track_features.csv        # Optional local storage for track features
├── notebooks/
│   ├── 01_data_retrieval.ipynb   # Retrieve and cache track data from Spotify
│   ├── 02_exploration.ipynb      # EDA: Analyze BPM, energy, mood distributions
│   └── 03_model_prototype.ipynb  # Prototype sequence generation model
├── src/
│   ├── spotify_api.py            # Spotify API helper functions
│   ├── feature_engineering.py    # Feature transformations and engineering
│   └── dj_set_generator.py       # Core logic for DJ set generation
├── app/ 
│   └── streamlit_app.py          # Streamlit app for optional UI
├── requirements.txt              # Dependencies for the project
└── README.md                     # Project documentation
```

INSTRUCTIONS - PROJECT FLOW

Absolutely—this sounds like a fantastic project that combines aspects of recommendation systems, music analysis, and creative sequence generation. Below is a roadmap on how you might build a “DJ Set” tool that:
	1.	Takes a seed song and a desired set duration as inputs.
	2.	Outputs a set list of tracks that:
	•	Matches the genre/BPM/feel of the seed song.
	•	Fills (approximately) the desired timespan.
	•	Flows like a DJ set—having musical “ups” and “downs” to keep things interesting.

1. Overview of the Approach
	1.	Data Source: You’ll need track-level features such as BPM, genre, energy, valence, etc.
	•	The most popular option is the Spotify Web API, which provides extensive audio features for each track.
	2.	Core ML / Algorithmic Components:
	•	Similarity: You’ll want to find tracks similar to the seed track in terms of BPM, key, genre, etc.
	•	Sequence Generation: You’ll arrange these tracks so that they have an organic “flow” and fill up a certain time.
	3.	Implementation Steps:
	•	Retrieve Features of the seed song and potential candidate tracks (via Spotify API).
	•	Build a Database (local or dynamic) of track features.
	•	Compute Similarities / Distances among tracks.
	•	Sequence or “Path” Generation that meets time and musical flow constraints.
	•	Output: A curated track list that fits the desired duration.
	4.	Optional Enhancements:
	•	A “flow curve” for energy or BPM across the set.
	•	A more advanced approach that uses reinforcement learning or Markov chain style sequence modeling.
	•	A web or GUI front-end (e.g., Streamlit or Gradio) where users pick a seed track and set duration.

2. Data Gathering

2.1. Setting Up Spotify API (Spotipy)
	•	Create a Spotify Developer Account:
	1.	Go to Spotify for Developers
	2.	Create an app to get Client ID and Client Secret.
	•	Install Spotipy (Python wrapper for Spotify Web API):

pip install spotipy


	•	Authorize your application to access data. In your Python code:

import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

client_credentials_manager = SpotifyClientCredentials(
    client_id='YOUR_SPOTIFY_CLIENT_ID',
    client_secret='YOUR_SPOTIFY_CLIENT_SECRET'
)
sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)



2.2. Fetch Audio Features

Spotify’s /audio-features endpoint returns:
	•	danceability (0-1)
	•	energy (0-1)
	•	key (0-11)
	•	loudness (decibels)
	•	mode (major or minor)
	•	speechiness (0-1)
	•	acousticness (0-1)
	•	instrumentalness (0-1)
	•	liveness (0-1)
	•	valence (0-1)
	•	tempo (≈ BPM)
	•	duration_ms (track length in ms)

You can also retrieve genre information by first searching or looking up the artist’s information.

3. Project Structure

Listed above in the README is the project structure 

4. Modeling the “DJ Set” Generation

4.1. Phase 1: Simple Similarity / Filter Approach
	1.	Input: Seed track, desired duration (minutes).
	2.	Extract the seed’s core features: BPM, energy, valence, genre, etc.
	3.	Filter your database of tracks to those within a certain BPM range (± 5 or 10 BPM from the seed?), same or similar genre, etc.
	4.	Rank these candidates by how close they match the seed’s energy and valence.

Creating the Set:
	•	Pick the next track that is most similar but not too similar.
	•	Keep a running total of duration. Once you exceed or meet the requested duration ± a small buffer (e.g., ±2 minutes), stop.

Pros: Fast, straightforward.
Cons: Doesn’t create an “arc” or “flow”—it mostly stays near the seed track’s vibe.

4.2. Phase 2: Introducing a “Flow Curve”

To simulate a DJ set’s natural ups and downs, define a target “energy curve” over time. For example, a set might have:
	1.	Low energy at the start (warm-up).
	2.	Gradual rise to peak energy around the midpoint.
	3.	A gentle cooldown near the end.

You can predefine or randomly generate a curve of “desired energy” (or BPM or valence) as a function of the fraction of the set’s total duration:

￼

Then, for each “slot” in your set:
	1.	Identify candidate tracks that have an energy close to ￼.
	2.	Among those, pick a track that transitions smoothly from the previous track’s BPM and key.
	3.	Keep adding tracks until you reach or slightly exceed the target duration.

Distance or Cost Function
You might define a distance ￼ for each transition from track ￼ to track ￼ as:

￼

where ￼ penalizes big jumps in musical key.

You then try to minimize the sum of these transition costs while also following your overall energy curve.

Implementation
	•	Could be a greedy approach that picks the next best track at each step.
	•	Or a dynamic programming / shortest path approach if you want the global optimum sequence.

4.3. Phase 3: Advanced / ML Approaches
	1.	Markov Chain / Next-Track Prediction
	•	You could train a Markov chain or next-track predictor using historical DJ sets (if you have that data).
	•	This would learn typical transitions in real-world DJ sets.
	2.	Reinforcement Learning
	•	Think of each track selection as a step in an episode, with a reward function that rewards smooth transitions and punishes abrupt changes.
	•	The agent learns a policy that picks the best next track.
	3.	Neural Networks
	•	Build a sequence model (e.g., an RNN or Transformer) that tries to predict track sequences given the desired “energy arc.”

5. Putting it All Together

5.1. Minimal Viable Product (MVP)
	1.	Local Database
	•	Start with a few hundred (or thousand) tracks from Spotify that you personally like or that are popular.
	•	Save their features (BPM, energy, valence, duration, etc.) in a CSV.
	2.	Simple Script
	•	Input: Seed Track ID, desired minutes.
	•	Output: A list of track IDs or names that sum up close to that duration.
	•	Filter by a BPM range around the seed, same or similar genre.
	•	Try a simple “flow” where you gradually go up in BPM or energy from track to track.
	3.	Manual Testing
	•	Print out the final tracklist.
	•	Check if the total time is correct.
	•	Listen to see if it flows logically.

5.2. Demo UI (Optional but Fun)
	•	Streamlit:

pip install streamlit

Then create streamlit_app.py:

import streamlit as st
from dj_set_generator import generate_set_list  # hypothetical function

st.title("DJ Set Generator")

seed_track = st.text_input("Enter Seed Track Name")
desired_duration = st.slider("Set Duration (minutes)", 10, 180, 60)

if st.button("Generate Set"):
    set_list = generate_set_list(seed_track, desired_duration)
    for track in set_list:
        st.write(track)


	•	Gradio: Another popular option for quick UIs.

6. Project Roadmap
	1.	Phase 1: Implement basic track similarity and time-based set generation.
	2.	Phase 2: Add an energy curve or BPM transitions for a more dynamic flow.
	3.	Phase 3: Explore advanced techniques (Markov chains, RL, or sequence models).
	4.	Phase 4: Add a front-end or deploy as a web service so friends/recruiters can try it live.
	5.	Phase 5: Expand your database to thousands of tracks to make sets more diverse.

7. Practical Tips & Considerations
	1.	Spotify Rate Limits: Watch out for how many requests you make. Cache results locally.
	2.	Exact Duration vs. Approximate: It’s often tricky to hit the set length exactly. Typically, a ±1–2 minute margin is acceptable.
	3.	Genre Classification: Spotify’s genre info is mostly at the artist level. You might combine that with track features to refine your approach.
	4.	Key Matching: If you really want to match like a pro DJ, consider the Camelot key wheel to find harmonically compatible keys.
	5.	User Interaction: Let users “thumbs up” or “thumbs down” certain recommendations to refine suggestions over time (collaborative filtering style).

8. Example Workflow
	1.	User: Enters “Daft Punk – One More Time” as the seed track, and selects a 60-minute set.
	2.	System:
	1.	Fetch Daft Punk’s “One More Time” track features from the cached DB or Spotify.
	2.	Filter potential tracks by BPM in the range [110, 130], same or similar genre tags (house, dance, electronic, etc.).
	3.	Sort them by closeness in energy/valence.
	4.	Construct a sequence of tracks, ensuring the total duration is around 60 minutes.
	5.	If advanced, incorporate a “flow curve” to vary the energy.
	3.	Output: A curated list of track URIs or names that fit the vibe and duration.

Final Thoughts

Building this “DJ Set” generator is an awesome way to showcase:
	•	API consumption skills (Spotify).
	•	Data manipulation & ML for sequence generation.
	•	Creativity in designing a system that simulates real DJ flow.
	•	Engineering a user-friendly interface and distributing it via GitHub.

It’s also highly extensible—once you have the core logic working, you can keep refining it to make the set transitions smarter and more interesting.

Good luck, have fun, and let the beats roll!